.common-values:

  docker-image: &docker-image circleci/python:3.6

  working_directory: &working-directory ~/repo

  # Download and cache dependencies
  restore-cache: &restore-cache
    keys:
      - v1-dependencies-{{ checksum "requirements.txt" }}

  create-venv: &create-venv
    name: Create virtualenv
    command: . scripts/create_venv.sh

  save-cache: &save-cache
    paths:
      - ./venv
    key: v1-dependencies-{{ checksum "requirements.txt" }}

  install-package: &install-package
    name: Install package
    command: |
      . scripts/helpers.sh
      install_package [test_deps]

  install-pandoc: &install-pandoc
    name: Install pandoc
    command: sudo apt-get install pandoc

.master-branch-filter: &master-branch-filter
  filters:
    branches:
      ignore: master

.requires-lint: &requires-lint
  requires:
    - lint
  <<: *master-branch-filter

.tags-only-filter: &tags-only-filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /.*/

.requires-build: &requires-build
  requires:
    - build
  <<: *tags-only-filter

.lint-steps: &lint-steps
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - run:
        name: Check code style (PEP8)
        command: . scripts/lint.sh
    - save_cache: *save-cache


.test-steps: &test-steps
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run: *install-package
    - run:
        name: Run tests
        command: . scripts/run_tests.sh

.pip-check: &pip-check
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run: *install-package
    - run:
        name: Run pip check
        command: |
          . scripts/helpers.sh
          activate_venv
          pip check

.build: &build
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run:
        name: Build package
        command: . scripts/build.sh
    - persist_to_workspace:
        root: ~/repo
        paths:
          - dist

.build-docs: &build-docs
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run: *install-pandoc
    - run: *install-package
    - run:
        name: Build documentation
        command: . scripts/build_docs.sh

.release: &release
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - attach_workspace:
        at: /tmp/package
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run:
        name: init .pypirc
        command: . scripts/init_pypirc.sh
    - run:
        name: Release package
        command: . scripts/release.sh /tmp/package/dist

.type-check: &type-check
  docker:
    - image: *docker-image
  working_directory: *working-directory
  steps:
    - checkout
    - restore_cache: *restore-cache
    - run: *create-venv
    - save_cache: *save-cache
    - run: *install-package
    - run:
        name: Run type tests
        command: . scripts/run_type_check.sh

version: 2
jobs:
  lint:
    <<: *lint-steps
  test:
    <<: *test-steps
  pip-check:
    <<: *pip-check
  build:
    <<: *build
  build-docs:
    <<: *build-docs
  release:
    <<: *release
  type-check:
    <<: *type-check


workflows:
  version: 2
  test-all:
    jobs:
      - lint:
          <<: *master-branch-filter
      - test:
          <<: *requires-lint
      - pip-check:
          <<: *requires-lint
      - type-check:
          <<: *requires-lint
      - build-docs:
          <<: *requires-lint
  build-and-release:
    jobs:
      - build:
          <<: *tags-only-filter
      - release:
          <<: *requires-build
